start: definition*

definition: code_block
    | assembly_definition
    | general_word_definition
    | macro_definition
    | constant_definition
    | system_variable_definition
    | _INCLUDE

code_block: "codeblock" code_line* "end"

assembly_definition: "def" "asm" "(" IDENTIFIER ")" WORD_NAME code_line* "end"

general_word_definition: "def" "word" "(" IDENTIFIER ")" WORD_NAME word* "end"

macro_definition: "macro" IDENTIFIER "(" macro_parameters ")" code_line* "end"

constant_definition: "const" IDENTIFIER "=" number _NEWLINE

system_variable_definition: "defsysvar" WORD_NAME (immediate_number | jump_target)? _NEWLINE

// Handle 'includes' by making them one single token that the lexer can the handle
// as a unit
_INCLUDE: "include" /\s+/ STRING

macro_parameters: [ IDENTIFIER ( "," IDENTIFIER )* ]

code_line: instruction _NEWLINE
    | macro_call _NEWLINE
    | label _NEWLINE

instruction: OPCODE ( "." SIZESUFFIX )? [ paramlist ]

paramlist: param ( "," param )*

param: register
    | register_indirect
    | expression

macro_call: IDENTIFIER "(" [ paramlist ] ")"

label: IDENTIFIER ":"

word: WORD_NAME

register: REGISTER

immediate_number: "#" number | IDENTIFIER

number: ( DEC_NUMBER | HEX_NUMBER )

register_indirect: register_plain_indirect
    | register_indirect_prefix
    | register_indirect_postfix
    
register_plain_indirect: "[" REGISTER "]"
register_indirect_prefix: "[" decrement_increment REGISTER "]"
register_indirect_postfix: "[" REGISTER decrement_increment "]"

jump_target: ":" IDENTIFIER

expression: term ( OPERATOR term )*

term: current_address
    | macro_parameter
    | immediate_number
    | jump_target

macro_parameter: "@" IDENTIFIER

current_address: "$"

decrement_increment: UNARY_OPERATION

OPCODE.2: "add"
    | "call"
    | "db"
    | "dw"
    | "ifkt"
    | "illegal"
    | "jc"
    | "jmp"
    | "jz"
    | "mov"
    | "nop"
    | "sra"
    | "sub"
    | "unsup"
    | "xor"

REGISTER: "%ip"
    | "%wp"
    | "%rsp"
    | "%dsp"
    | "%acc1"
    | "%acc2"
    | "%ret"
    | "%pc"

UNARY_OPERATION: "++" | "--"

OPERATOR: "+" | "-"

WORD_NAME: /[\x21-\x7E]+/i
IDENTIFIER: /[a-zA-Z0-9_]+/
SIZESUFFIX: /[bw]/i
DEC_NUMBER: /\d+/
HEX_NUMBER: /0x[\da-f]*/i

//%import common.NEWLINE
COMMENT: /\/\/[^\n]*/
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+
%ignore COMMENT

%import common.LETTER
%import common.WS
%import common.ESCAPED_STRING -> STRING
%ignore WS