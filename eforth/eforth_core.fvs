// -------------------------------------------------------------------------
// Device dependent I/O

def asm(code) alias QRX ?RX
    ifkt FKT_KEY
    pushd %acc1
    NEXT()
end

def asm(code) alias TXSTO TX!
    popd %acc1
    ifkt FKT_EMIT
    NEXT()
end

// -------------------------------------------------------------------------
// kernel words

def asm(code) doLIT
    mov %acc1, [%ip++]
    pushd %acc1
    NEXT()
end

def asm(code) BYE
    ifkt FKT_TERMINATE
end

def asm(code) EXIT
    popr %ip
    NEXT()
end

def asm(code) EXECUTE
    popd %acc1
    jmp %acc1
    NEXT()
end

def asm(code) next
    mov %acc1, #0x1
    mov %acc2, %acc1
    popr %acc1
    sub %acc1, %acc1, %acc2
    jc :next1
    pushr %acc1
    mov %ip, [%ip]
    NEXT()
next1:
    mov %acc1, CELLSIZE
    add %ip, %ip, %acc1
    NEXT()
end

def asm(code) BRANCH
    mov %ip, [%ip]
    NEXT()
end

def asm(code) ?BRANCH
    popd %acc1
    jz :nobranch
    mov %acc1, CELLSIZE
    add %ip, %ip, %acc1
    NEXT()
nobranch:
    mov %ip, [%ip]
    NEXT()
end

// -------------------------------------------------------------------------
// memory fetch & store

def asm(code) !       // w a --
    popd %acc1
    popd %acc2
    mov [%acc1], %acc2
    NEXT()
end

def asm(code) @       // a -- w
    popd %acc1
    mov %acc1, [%acc1]
    pushd %acc1
    NEXT()
end

def asm(code) C!      // c b --
    popd %acc1     // get address
    popd %acc2     // get data
    mov.b [%acc1], %acc2
    NEXT()
end

def asm(code) C@      // b -- c
    popd %acc1     // get address
    mov.b %acc2, [%acc1]    // fetch the character from this address
    pushd %acc2    // push the character on the data stack
    NEXT()
end

// -------------------------------------------------------------------------
// return stack

def asm(code) RP@     // -- a
    pushd %rsp
    NEXT()
end

def asm[COMPILE_ONLY](code) RP!     // a --
    popd %rsp
    NEXT()
end

def asm[COMPILE_ONLY](code) R>      // -- w
    popr %acc1
    pushd %acc1
    NEXT()
end

def asm(code) R@      // -- w
    popr %acc1
    pushr %acc1
    pushd %acc1
    NEXT()
end

def asm[COMPILE_ONLY](code) >R      // w --
    popd %acc1
    pushr %acc1
    NEXT()
end

// -------------------------------------------------------------------------
// data stack

def asm(code) SP@       // -- a
    mov %acc1, %dsp
    pushd %acc1
    NEXT()
end

def asm(code) SP!       // a --
    popd %acc1
    mov %dsp, %acc1
    NEXT()
end

def asm(code) DROP      // w --
    popd %acc1
    NEXT()
end

def asm(code) DUP       // w -- w w
    popd %acc1
    pushd %acc1
    pushd %acc1
    NEXT()
end

def asm(code) SWAP      // w1 w2 -- w2 w1
    popd %acc1
    popd %acc2
    pushd %acc1
    pushd %acc2
    NEXT()
end

def asm(code) OVER    // w1 w2 -- w1 w2 w1
    popd %acc2
    popd %acc1
    pushd %acc1
    pushd %acc2
    pushd %acc1
    NEXT()
end

def word(colon) ?DUP    // w -- w w | 0
    DUP ?BRANCH :qdup1
    DUP
qdup1:
    EXIT
end

def word(colon) NIP     // w1 w2 -- w2
    SWAP DROP
    EXIT
end

def word(colon) ROT     // w1 w2 w3 -- w2 w3 w1
    >R SWAP R> SWAP
    EXIT
end

def word(colon) 2DROP   // w w --
    DROP DROP
    EXIT
end

def word(colon) 2DUP    // w1 w2 -- w1 w2 w1 w2
    OVER OVER
    EXIT
end

// -------------------------------------------------------------------
// Logic

def asm(code) 0<
    popd %acc1
    sra %acc1, #31
    pushd %acc1
    NEXT()
end

def asm(code) OR
    popd %acc1
    popd %acc2
    or %acc1, %acc1, %acc2
    pushd %acc1
    NEXT()
end

def asm(code) AND
    popd %acc1
    popd %acc2
    and %acc1, %acc1, %acc2
    pushd %acc1
    NEXT()
end

def asm(code) XOR
    popd %acc1
    popd %acc2
    xor %acc1, %acc1, %acc2
    pushd %acc1
    NEXT()
end

def word(colon) NOT
    doLIT -1 XOR
    EXIT
end

// -------------------------------------------------------------------
// Arithmetic

def asm(code) UM+           // u u -- u cy or u u -- ud
    popd %acc1
    popd %acc2
    add %acc1, %acc1, %acc2
    jc :ump_carry
    mov %acc2, #0
    jmp :ump_push_all
ump_carry:
    mov %acc2, #1
ump_push_all:
    pushd %acc1
    pushd %acc2
    NEXT()
end

def word(colon) +           // u u -- u
    UM+ DROP
    EXIT
end

def word(colon) NEGATE      // n -- -n
    NOT doLIT 1 +
    EXIT
end

def word(colon) DNEGATE     // d -- -d
    NOT >R NOT doLIT 1 UM+ R> +
    EXIT
end

def asm(code) -             // w w -- w
    popd %acc2
    popd %acc1
    sub %acc1, %acc1, %acc2
    pushd %acc1
    NEXT()
end

def word(colon) ABS         // n -- +n
    DUP 0<
    ?BRANCH :abs1
    NEGATE
abs1:
    EXIT
end

// -------------------------------------------------------------------
// system variables

def word(colon) doVAR
    R>
    EXIT
end

def word(colon) UP
    doVAR :uzero
end

def word(colon) doUSER  // -- a
    R> @
    UP @ +
    EXIT
end

macro __DEFUSERVAR_CFA()
    call :doLIST
    dw :douser_cfa
end

def asm(uservar) SP0
    USER_OFFSET(:u_sp0)
end

def asm(uservar) RP0
    USER_OFFSET(:u_rp0)
end

def asm(uservar) '?KEY
    USER_OFFSET(:u_qkey)
end

def asm(uservar) 'EMIT
    USER_OFFSET(:u_temit)
end

def asm(uservar) 'EXPECT
    USER_OFFSET(:u_texpect)
end

def asm(uservar) temp
    USER_OFFSET(:u_temp)
end

def asm(uservar) SPAN
    USER_OFFSET(:u_span)
end

def asm(uservar) >IN
    USER_OFFSET(:u_toin)
end

def asm(uservar) #TIB
    USER_OFFSET(:u_htib)
end

def asm(uservar) HLD
    USER_OFFSET(:u_hld)
end

def asm(uservar) HANDLER
    USER_OFFSET(:u_handler)
end

def asm(uservar) CP
    USER_OFFSET(:u_ctop)
end

def asm(uservar) LAST
    USER_OFFSET(:u_lastn)
end

// -------------------------------------------------------------------
// Comparison

def word(colon) 0=      // w -- t
    ?BRANCH :zeq
    doLIT 0
    EXIT
zeq:
    doLIT -1
    EXIT
end

def word(colon) alias EQUAL =  // w w -- t
    XOR
    ?BRANCH :equ1
    doLIT 0 EXIT        // values are different
equ1:
    doLIT -1 EXIT       // values are equal
end

def word(colon) U<      // u u -- t
    2DUP XOR 0<
    ?BRANCH :ules1
    SWAP DROP 0< EXIT
ules1:
    - 0<
    EXIT
end

def word(colon) <       // n1 n2 -- t
    2DUP XOR 0<
    ?BRANCH :less1
    DROP 0< EXIT
less1:
    - 0< EXIT
end

def word(colon) MIN     // n n -- n
    2DUP SWAP <
    ?BRANCH :min1
    SWAP
min1:
    DROP
    EXIT
end

def word(colon) MAX     // n n -- n
    2DUP <
    ?BRANCH :max1
    SWAP
max1:
    DROP
    EXIT
end

def word(colon) WITHIN      // u ul uh -- t
    OVER - >R - R> U<
    EXIT
end

// -------------------------------------------------------------------
// Divide

def word(colon) UM/MOD  // udl udh un -- ur uq
    2DUP U<
    ?BRANCH :umm4
    NEGATE doLIT 31 >R  // 31 for the amount of bits in CELL
umm1:
    >R DUP UM+
    >R >R DUP UM+
    R> + DUP
    R> R@ SWAP >R
    UM+ R> OR
    ?BRANCH :umm2
    >R DROP doLIT 1 + R>
    BRANCH :umm3
umm2:
    DROP
umm3:
    R>
    next :umm1
    DROP SWAP EXIT
umm4:
    DROP 2DROP
    doLIT -1 DUP EXIT
end

def word(colon) M/MOD   // d n -- r q
    DUP 0< DUP >R
    ?BRANCH :mmod1
    NEGATE >R DNEGATE R>
mmod1:
    >R DUP 0<
    ?BRANCH :mmod2
    R@ +
mmod2:
    R> UM/MOD R>
    ?BRANCH :mmod3
    SWAP NEGATE SWAP
mmod3:
    EXIT
end

def word(colon) /MOD    // n n -- r q
    OVER 0< SWAP M/MOD
    EXIT
end

def word(colon) MOD     // n n -- r
    /MOD DROP
    EXIT
end

def word(colon) /       // n n -- q
    /MOD NIP
    EXIT
end

// -------------------------------------------------------------------
// Multiply

def word(colon) UM*     // u1 u2 -- ud
    doLIT 0 SWAP        // u1 0 u2
    doLIT 31 >R
umst1:
    DUP UM+ >R >R
    DUP UM+ R> + R>
    ?BRANCH :umst2
    >R OVER UM+ R> +
umst2:
    next :umst1
    ROT DROP
    EXIT
end

def word(colon) *       // n n -- n
    UM* DROP
    EXIT
end

def word(colon) M*      // n n -- d
    2DUP XOR 0< >R ABS SWAP ABS UM* R>
    ?BRANCH :msta1
    DNEGATE
msta1:
    EXIT
end

def word(colon) */MOD   // n n n -- r q
    >R M* R> M/MOD
    EXIT
end

// -------------------------------------------------------------------
// Bits & Bytes

def word(colon) CELL+       // a -- a
    doLIT CELLSIZE +
    EXIT
end

def word(colon) CELL-       // a -- a
    doLIT -4 +
    EXIT
end

def word(colon) CELLS       // n -- n
    doLIT CELLSIZE *
    EXIT
end

def word(colon) BL          // -- 32
    doLIT 32
    EXIT
end

def word(colon) >CHAR       // c -- c
    doLIT 127 AND DUP       // mask MSB
    doLIT 127 BL WITHIN     // check for printable
    ?BRANCH :tcha1
    DROP doLIT 95           // replace with '_'
tcha1:
    EXIT
end

def word(colon) DEPTH       // -- n
    // ATTENTION: The order of SP@ and SP0 need to be
    // swapped if the stack grows downwards
    SP@ SP0 @ - doLIT CELLSIZE /
    EXIT
end

def asm(code) PICK         // +n -- w
    popd %acc1
    sll %acc1, #2   // convert cells to bytes
    pushr %dsp      // save %dsp so we can manipulate it
    sub %dsp, %dsp, %acc1
    popd %acc1      // get the n-th entry in data stack
    popr %dsp       // restore %dsp
    pushd %acc1
    NEXT()
end

def word[IMMEDIATE](colon) ALIGNED // b -- a
    // TODO
    EXIT
end

// -------------------------------------------------------------------
// Memory access

def word(colon) COUNT   // b -- b +n
    DUP doLIT 1 + SWAP C@
    EXIT
end

def word(colon) HERE    // -- a
    CP @
    EXIT
end

def word(colon) TIB     // -- a
    #TIB CELL+ @
    EXIT
end

def word(colon) @EXECUTE    // a --
    @ ?DUP
    ?BRANCH :exe1
    EXECUTE
exe1:
    EXIT
end

def word(colon) CMOVE   // b1 b2 u --
    >R
    BRANCH :cmov2
cmov1:
    >R DUP C@ R@ C!
    doLIT 1 +
    R> doLIT 1 +
cmov2:
    next :cmov1
    2DROP
    EXIT
end

def word(colon) PACK$   // b u a -- a
    ALIGNED DUP >R      // strings only on cell boundary
    OVER DUP doLIT 0
    doLIT 4 UM/MOD DROP // count mod cell
    - OVER +
    doLIT 0 SWAP !      // null fill cell
    2DUP C! doLIT 1 +   // save count
    SWAP CMOVE R>       // move string
    EXIT
end

// -------------------------------------------------------------------
// Basic I/O

def word(colon) KEY
    '?KEY @EXECUTE
    EXIT
end

def word(colon) EMIT
    'EMIT @EXECUTE
    EXIT
end

def word(colon) ECHO
    EMIT
    EXIT
end

def word(colon) do$     // -- a
    // TODO: COMPILE-ONLY
    R> R@ R> COUNT + ALIGNED >R
    SWAP >R
    EXIT
end

def word(colon) alias STRQP $"| // -- a
    do$
    EXIT
end

def word(colon) TYPE    // b u --
    >R
    BRANCH :type2
type1:
    DUP C@ EMIT
    doLIT 1 +
type2:
    next :type1
    DROP
    EXIT
end

// -------------------------------------------------------------------
// Parsing

def word(colon) parse   // b u c - b u delta ; <string>
    temp ! OVER >R DUP  // c in temp, b in R -- b u u
    ?BRANCH :pars8      // jump to end if length is 0
    doLIT 1 -           // b u-1
    temp @ BL =
    ?BRANCH :pars3      // goto pars3 when c!=BL
    >R                  // b, u-1 in R as loop value
pars1:
    BL OVER C@          // b BL char@b
    - 0< NOT            //
    ?BRANCH :pars2      // is the character non-printable? 
    doLIT 1 +           // yes, skip it; b+1
    next :pars1
    R> DROP             
    doLIT 0 DUP EXIT
pars2:
    R>
pars3:
    OVER SWAP
    >R
pars4:
    temp @ OVER C@ -    // scan for delimiter
    temp @ BL =
    ?BRANCH :pars5
    0<
pars5:
    ?BRANCH :pars6
    doLIT 1 +
    next :pars4
    DUP >R
    BRANCH :pars7
pars6:
    R> DROP DUP
    doLIT 1 + >R
pars7:
    OVER -
    R> R> - EXIT
pars8:
    OVER R> - EXIT
end

// -------------------------------------------------------------------
// Forth compiler

def word(colon) TAP     // bot eot cur c -- bot eot cur
    DUP ECHO OVER C! doLIT 1 +
    EXIT
end

def word(colon) kTAP
    DUP doLIT 13 XOR
    ?BRANCH :ktap2
    doLIT 8 XOR
    ?BRANCH :ktap1
    BL TAP EXIT
ktap1:
    doLIT 8 EXIT        // TODO: This should actually perform a backspace
ktap2:
    DROP SWAP DROP DUP
    EXIT
end

def word(colon) accept  // b u -- b u
// accept characters to input buffer, return with actual count
    OVER + OVER         // b b+u b
accept1:
    2DUP                // b b+u b b+u b
    XOR
    ?BRANCH :accept4
    KEY DUP
    BL - doLIT 95 U<
    BL doLIT 127 WITHIN
    ?BRANCH :accept2
    TAP
    BRANCH :accept3
accept2:
    kTAP         // 'TAP @EXECUTE
accept3:
    BRANCH :accept1
accept4:
    DROP OVER -
    EXIT
end

def word(colon) QUERY
    TIB doLIT 80 'EXPECT @EXECUTE
    #TIB !              // Store the new number of characters in TIB
    DROP doLIT 0 >IN !  // Reset the parsing pointer
    EXIT
end

// -------------------------------
// Additional words

def asm(code) DUMP
    ifkt FKT_DUMP
    NEXT()
end

def asm(code) ILLEGAL
    illegal
    NEXT()
end

def word(colon) TESTW
loop:
    QUERY
    ILLEGAL
    EXIT
end

def asm(code) TESTC
    ifkt FKT_KEY
    ifkt FKT_KEY
    ifkt FKT_DUMP
    illegal
    NEXT()
end
