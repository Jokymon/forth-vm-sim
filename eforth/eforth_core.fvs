const TIBB = 0x3000

const BKSPP = 8
const LF = 10
const CRR = 13

// -------------------------------------------------------------------------
// kernel words

defcode doLIT
    mov %acc1, [%ip++]
    PUSHD(%acc1)
    NEXT()
end

defcode BYE
    ifkt FKT_TERMINATE
end

defcode EXIT
    mov %ip, [--%rsp]
    NEXT()
end

defcode EXECUTE
    POPD(%acc1)
    jmp [%acc1]
    NEXT()
end

defcode BRANCH
    mov %ip, [%ip]
    NEXT()
end

defcode ?BRANCH
    POPD(%acc1)
    jz :nobranch
    mov %acc1, CELLSIZE
    add %ip, %ip, %acc1
    NEXT()
nobranch:
    mov %ip, [%ip]
    NEXT()
end

// -------------------------------------------------------------------------
// memory fetch & store

defcode !       // w a --
    POPD(%acc1)
    POPD(%acc2)
    mov [%acc1], %acc2
    NEXT()
end

defcode @       // a -- w
    POPD(%acc1)
    mov %acc1, [%acc1]
    PUSHD(%acc1)
    NEXT()
end

defcode C!      // c b --
    POPD(%acc1)     // get address
    POPD(%acc2)     // get data
    mov.b [%acc1], [%acc2]
    NEXT()
end

defcode C@      // b -- c
    POPD(%acc1)     // get address
    mov.b %acc2, [%acc1]    // fetch the character from this address
    PUSHD(%acc2)    // push the character on the data stack
    NEXT()
end

// -------------------------------------------------------------------------
// return stack

defcode RP@     // -- a
    PUSHD(%rsp)
    NEXT()
end

defcode RP!     // a --
    POPD(%rsp)
    NEXT()
end

defcode R>      // -- w
    POPR(%acc1)
    PUSHD(%acc1)
    NEXT()
end

defcode R@      // -- w
    POPR(%acc1)
    PUSHR(%acc1)
    PUSHD(%acc1)
    NEXT()
end

defcode >R      // w --
    POPD(%acc1)
    PUSHR(%acc1)
    NEXT()
end

// -------------------------------------------------------------------------
// data stack

defcode DROP
    POPD(%acc1)
    NEXT()
end

defcode DUP
    POPD(%acc1)
    PUSHD(%acc1)
    PUSHD(%acc1)
    NEXT()
end

defcode SWAP
    POPD(%acc1)
    POPD(%acc2)
    PUSHD(%acc1)
    PUSHD(%acc2)
    NEXT()
end

defcode OVER    // w1 w2 -- w1 w2 w1
    POPD(%acc2)
    POPD(%acc1)
    PUSHD(%acc1)
    PUSHD(%acc2)
    PUSHD(%acc1)
    NEXT()
end

defword NIP     // w1 w2 -- w2
    SWAP DROP
    EXIT
end

defword 2DUP    // w1 w2 -- w1 w2 w1 w2
    OVER OVER
    EXIT
end

defcode +
    POPD(%acc1)
    POPD(%acc2)
    add %acc1, %acc1, %acc2
    PUSHD(%acc1)
    NEXT()
end

defcode -
    POPD(%acc2)
    POPD(%acc1)
    sub %acc1, %acc1, %acc2
    PUSHD(%acc1)
    NEXT()
end

// -------------------------------------------------------------------------
// logical words

defcode 0<
    POPD(%acc1)
    sra %acc1, #31
    PUSHD(%acc1)
    NEXT()
end

defcode XOR
    POPD(%acc1)
    POPD(%acc2)
    xor %acc1, %acc1, %acc2
    PUSHD(%acc1)
    NEXT()
end

defword U<
    2DUP XOR 0<
    ?BRANCH :ules1
    SWAP DROP 0< EXIT
ules1:
    - 0<
    EXIT
end

defword WITHIN      // u ul uh -- t
    OVER - >R - R> U<
    EXIT
end

defcode KEY
    ifkt FKT_KEY
    PUSHD(%acc1)
    NEXT()
end

defcode EMIT
    POPD(%acc1)
    ifkt FKT_EMIT
    NEXT()
end

defword ECHO
    EMIT
    EXIT
end

defword BL
    doLIT 32
    EXIT
end

// -------------------------------------------------------------------
// system variables

defsysvar SP0 DSP_BASE
defsysvar RP0 RSP_BASE

defsysvar SPAN
defsysvar >IN
defsysvar #TIB
defsysvar TIB_ADDR TIBB     // this only has a name to reserve space #TODO: does it actually make sense this way?

defsysvar HLD
defsysvar HANDLER

defsysvar STATE
defsysvar HERE :testw_end
defsysvar LATEST

// -------------------------------------------------------------------
// Memory access

defword TIB     // -- a
    #TIB @
    EXIT
end

// -------------------------------------------------------------------
// Forth compiler

defword TAP     // bot eot cur c -- bot eot cur
    DUP ECHO OVER C! doLIT 1 +
    EXIT
end

defword kTAP
    DUP doLIT 13 XOR
    ?BRANCH :ktap2
    doLIT 8 XOR
    ?BRANCH :ktap1
    BL TAP EXIT
ktap1:
    doLIT 8 EXIT        // TODO: This should actually perform a backspace
ktap2:
    DROP SWAP DROP DUP
    EXIT
end

defword EXPECT  // b u -- b u
// accept characters to input buffer, return with actual count
    OVER + OVER         // b b+u b
expect1:
    2DUP                // b b+u b b+u b
    XOR
    ?BRANCH :expect4
    KEY DUP
    BL - doLIT 95 U<
    BL doLIT 127 WITHIN
    ?BRANCH :expect2
    TAP
    BRANCH :expect3
expect2:
    kTAP         // 'TAP @EXECUTE
expect3:
    BRANCH :expect1
expect4:
    DROP OVER -
    EXIT
end

defword QUERY
query_loop:
    TIB doLIT 80 EXPECT
    BRANCH :query_loop
    EXIT
end

// -------------------------------
// Additional words

defcode DUMP
    ifkt FKT_DUMP
    NEXT()
end

defcode ILLEGAL
    illegal
    NEXT()
end

defword TESTW
loop:
    QUERY
    ILLEGAL
    EXIT
end

defcode TESTC
    ifkt FKT_KEY
    ifkt FKT_KEY
    ifkt FKT_DUMP
    illegal
    NEXT()
end
