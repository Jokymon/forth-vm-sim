// -------------------------------------------------------------------------
// Device dependent I/O

def asm(code) alias QRX ?RX
    ifkt FKT_KEY
    pushd %acc1
    NEXT()
end

def asm(code) alias TXSTO TX!
    popd %acc1
    ifkt FKT_EMIT
    NEXT()
end

// -------------------------------------------------------------------------
// kernel words

// Push an inline literal.
def asm(code) doLIT     // -- w
    mov %acc1, [%ip++]
    pushd %acc1
    NEXT()
end

// Process colon list.
def asm(code) doLIST    // a --
    pushr %ip
    mov %ip, %ret
    NEXT()
end

// Exit Forth
def asm(code) BYE       // --
    ifkt FKT_TERMINATE
end

// Terminate a colon definition
def asm(code) EXIT      // --
    popr %ip
    NEXT()
end

// Execute the word at ca
def asm(code) EXECUTE   // ca --
    popd %acc1
    jmp %acc1
    NEXT()
end

// Run time code for the single index loop
def asm(code) next      // --
    mov %acc2, #0x1
    popr %acc1              // get TOS(r)
    sub %acc1, %acc1, %acc2 // decrement
    jc :next1               // jump if decremented below 0
    pushr %acc1             // decremented value back on TOS(r)
    mov %ip, [%ip]          // jump to label after next
    NEXT()
next1:
    mov %acc1, CELLSIZE     // skip to next word
    add %ip, %ip, %acc1
    NEXT()
end

// Branch if flag is zero
def asm(code) BRANCH    // f --
    mov %ip, [%ip]
    NEXT()
end

// Branch to an inline address
def asm(code) alias QBRAN ?BRANCH  // branch if TOS ==0
    popd %acc1
    jz :bran1               // is TOS == 0
    mov %acc1, CELLSIZE     // no, so point ip to next cell
    add %ip, %ip, %acc1
    NEXT()
bran1:
    mov %ip, [%ip]          // yes, so jump to location from next cell
    NEXT()
end

// -------------------------------------------------------------------------
// memory fetch & store

def asm(code) !       // w a --
    popd %acc1
    popd %acc2
    mov [%acc1], %acc2
    NEXT()
end

def asm(code) @       // a -- w
    popd %acc1
    mov %acc1, [%acc1]
    pushd %acc1
    NEXT()
end

def asm(code) C!      // c b --
    popd %acc1     // get address
    popd %acc2     // get data
    mov.b [%acc1], %acc2
    NEXT()
end

def asm(code) C@      // b -- c
    popd %acc1     // get address
    mov.b %acc2, [%acc1]    // fetch the character from this address
    pushd %acc2    // push the character on the data stack
    NEXT()
end

// -------------------------------------------------------------------------
// return stack

def asm(code) RP@     // -- a
    pushd %rsp
    NEXT()
end

def asm[COMPILE_ONLY](code) RP!     // a --
    popd %rsp
    NEXT()
end

def asm[COMPILE_ONLY](code) R>      // -- w
    popr %acc1
    pushd %acc1
    NEXT()
end

def asm(code) R@      // -- w
    popr %acc1
    pushr %acc1
    pushd %acc1
    NEXT()
end

def asm[COMPILE_ONLY](code) >R      // w --
    popd %acc1
    pushr %acc1
    NEXT()
end

// -------------------------------------------------------------------------
// data stack

def asm(code) SP@       // -- a
    mov %acc1, %dsp
    pushd %acc1
    NEXT()
end

def asm(code) SP!       // a --
    popd %acc1
    mov %dsp, %acc1
    NEXT()
end

def asm(code) DROP      // w --
    popd %acc1
    NEXT()
end

def asm(code) DUP       // w -- w w
    popd %acc1
    pushd %acc1
    pushd %acc1
    NEXT()
end

def asm(code) SWAP      // w1 w2 -- w2 w1
    popd %acc1
    popd %acc2
    pushd %acc1
    pushd %acc2
    NEXT()
end

def asm(code) OVER    // w1 w2 -- w1 w2 w1
    popd %acc2
    popd %acc1
    pushd %acc1
    pushd %acc2
    pushd %acc1
    NEXT()
end

def word(colon) ?DUP    // w -- w w | 0
    DUP ?BRANCH :qdup1
    DUP
qdup1:
    EXIT
end

def word(colon) NIP     // w1 w2 -- w2
    SWAP DROP
    EXIT
end

def word(colon) ROT     // w1 w2 w3 -- w2 w3 w1
    >R SWAP R> SWAP
    EXIT
end

def word(colon) 2DROP   // w w --
    DROP DROP
    EXIT
end

def word(colon) 2DUP    // w1 w2 -- w1 w2 w1 w2
    OVER OVER
    EXIT
end

// -------------------------------------------------------------------
// Logic

def asm(code) 0<
    popd %acc1
    sra %acc1, #31
    pushd %acc1
    NEXT()
end

def asm(code) OR
    popd %acc1
    popd %acc2
    or %acc1, %acc1, %acc2
    pushd %acc1
    NEXT()
end

def asm(code) AND
    popd %acc1
    popd %acc2
    and %acc1, %acc1, %acc2
    pushd %acc1
    NEXT()
end

def asm(code) XOR
    popd %acc1
    popd %acc2
    xor %acc1, %acc1, %acc2
    pushd %acc1
    NEXT()
end

def word(colon) NOT
    doLIT -1 XOR
    EXIT
end

// -------------------------------------------------------------------
// Arithmetic

def asm(code) UM+           // u u -- u cy or u u -- ud
    popd %acc1
    popd %acc2
    add %acc1, %acc1, %acc2
    jc :ump_carry
    mov %acc2, #0
    jmp :ump_push_all
ump_carry:
    mov %acc2, #1
ump_push_all:
    pushd %acc1
    pushd %acc2
    NEXT()
end

def word(colon) +           // u u -- u
    UM+ DROP
    EXIT
end

def word(colon) NEGATE      // n -- -n
    NOT doLIT 1 +
    EXIT
end

def word(colon) DNEGATE     // d -- -d
    NOT >R NOT doLIT 1 UM+ R> +
    EXIT
end

def asm(code) -             // w w -- w
    popd %acc2
    popd %acc1
    sub %acc1, %acc1, %acc2
    pushd %acc1
    NEXT()
end

def word(colon) ABS         // n -- +n
    DUP 0<
    ?BRANCH :abs1
    NEGATE
abs1:
    EXIT
end

// -------------------------------------------------------------------
// user variables

// Run time routine for VARIABLE and CREATE
def word[COMPILE_ONLY](colon) doVAR     // -- a
    R>
    EXIT
end

// Pointer to the user area
def word(colon) UP      // -- a
    doVAR :uzero
end

// Run time routine for user variables
def word(colon) doUSER  // -- a
    R> @
    UP @ +
    EXIT
end

macro __DEFUSERVAR_CFA()
    call :dolist_cfa
    dw :douser_cfa
end

// Pointer to bottom of the data stack
def asm(uservar) SP0    // -- a
    USER_OFFSET(:u_sp0)
end

// Pointer to bottom of return stack
def asm(uservar) RP0    // -- a
    USER_OFFSET(:u_rp0)
end

// Execution vector of ?KEY
def asm(uservar) '?KEY  // -- a
    USER_OFFSET(:u_qkey)
end

// Execution vector of EMIT
def asm(uservar) 'EMIT  // -- a
    USER_OFFSET(:u_temit)
end

// Execution vector of EXPECT
def asm(uservar) 'EXPECT    // -- a
    USER_OFFSET(:u_texpect)
end

// Execution vector of TAP
def asm(uservar) 'TAP   // -- a
    USER_OFFSET(:u_ttap)
end

// Execution vector of ECHO
def asm(uservar) 'ECHO  // -- a
    USER_OFFSET(:u_techo)
end

// Execution vector of PROMPT
def asm(uservar) 'PROMPT    // -- a
    USER_OFFSET(:u_tprompt)
end

// Storage of the radix base for numeric I/O.
def asm(uservar) BASE   // -- a
    USER_OFFSET(:u_base)
end

// A temporary storage location used in parse and find
def asm(uservar) temp   // -- a
    USER_OFFSET(:u_temp)
end

// Hold character count received by EXPECT
def asm(uservar) SPAN   // -- a
    USER_OFFSET(:u_span)
end

// Hold the character pointer while parsing input stream
def asm(uservar) >IN    // -- a
    USER_OFFSET(:u_toin)
end

// Hold the current count and address of the terminal input buffer
def asm(uservar) #TIB   // -- a
    USER_OFFSET(:u_htib)
end

// Execution vector of EVAL
def asm(uservar) alias TEVAL 'EVAL  // -- a
    USER_OFFSET(:u_teval)
end

// Execution vector of NUMBER?
def asm(uservar) alias TNUMB 'NUMBER    // -- a
    USER_OFFSET(:u_tnumber)
end

// Hold a pointer in building a numeric output string
def asm(uservar) HLD    // -- a
    USER_OFFSET(:u_hld)
end

// Hold the return stack pointer for error handling
def asm(uservar) HANDLER    // -- a
    USER_OFFSET(:u_handler)
end

// Area to specify vocabulary search order
def asm(uservar) CONTEXT    // -- a
    USER_OFFSET(:u_context)
end

// Point to the vocabulary to be extended
def asm(uservar) CURRENT    // -- a
    USER_OFFSET(:u_current)
end

// Point to the top of the code dictionary
def asm(uservar) CP     // -- a
    USER_OFFSET(:u_ctop)
end

// Point to the last name in the name dictionary
def asm(uservar) LAST   // -- a
    USER_OFFSET(:u_lastn)
end

// -------------------------------------------------------------------
// Comparison

def word(colon) 0=      // w -- t
    ?BRANCH :zeq
    doLIT 0
    EXIT
zeq:
    doLIT -1
    EXIT
end

def word(colon) alias EQUAL =  // w w -- t
    XOR
    ?BRANCH :equ1
    doLIT 0 EXIT        // values are different
equ1:
    doLIT -1 EXIT       // values are equal
end

def word(colon) U<      // u u -- t
    2DUP XOR 0<
    ?BRANCH :ules1
    SWAP DROP 0< EXIT
ules1:
    - 0<
    EXIT
end

def word(colon) <       // n1 n2 -- t
    2DUP XOR 0<
    ?BRANCH :less1
    DROP 0< EXIT
less1:
    - 0< EXIT
end

def word(colon) MIN     // n n -- n
    2DUP SWAP <
    ?BRANCH :min1
    SWAP
min1:
    DROP
    EXIT
end

def word(colon) MAX     // n n -- n
    2DUP <
    ?BRANCH :max1
    SWAP
max1:
    DROP
    EXIT
end

def word(colon) WITHIN      // u ul uh -- t
    OVER - >R - R> U<
    EXIT
end

// -------------------------------------------------------------------
// Divide

def word(colon) UM/MOD  // udl udh un -- ur uq
    2DUP U<
    ?BRANCH :umm4
    NEGATE doLIT 31 >R  // 31 for the amount of bits in CELL
umm1:
    >R DUP UM+
    >R >R DUP UM+
    R> + DUP
    R> R@ SWAP >R
    UM+ R> OR
    ?BRANCH :umm2
    >R DROP doLIT 1 + R>
    BRANCH :umm3
umm2:
    DROP
umm3:
    R>
    next :umm1
    DROP SWAP EXIT
umm4:
    DROP 2DROP
    doLIT -1 DUP EXIT
end

def word(colon) M/MOD   // d n -- r q
    DUP 0< DUP >R
    ?BRANCH :mmod1
    NEGATE >R DNEGATE R>
mmod1:
    >R DUP 0<
    ?BRANCH :mmod2
    R@ +
mmod2:
    R> UM/MOD R>
    ?BRANCH :mmod3
    SWAP NEGATE SWAP
mmod3:
    EXIT
end

def word(colon) /MOD    // n n -- r q
    OVER 0< SWAP M/MOD
    EXIT
end

def word(colon) MOD     // n n -- r
    /MOD DROP
    EXIT
end

def word(colon) /       // n n -- q
    /MOD NIP
    EXIT
end

// -------------------------------------------------------------------
// Multiply

def word(colon) UM*     // u1 u2 -- ud
    doLIT 0 SWAP        // u1 0 u2
    doLIT 31 >R
umst1:
    DUP UM+ >R >R
    DUP UM+ R> + R>
    ?BRANCH :umst2
    >R OVER UM+ R> +
umst2:
    next :umst1
    ROT DROP
    EXIT
end

def word(colon) *       // n n -- n
    UM* DROP
    EXIT
end

def word(colon) M*      // n n -- d
    2DUP XOR 0< >R ABS SWAP ABS UM* R>
    ?BRANCH :msta1
    DNEGATE
msta1:
    EXIT
end

def word(colon) */MOD   // n n n -- r q
    >R M* R> M/MOD
    EXIT
end

// -------------------------------------------------------------------
// Bits & Bytes

def word(colon) CELL+       // a -- a
    doLIT CELLSIZE +
    EXIT
end

def word(colon) CELL-       // a -- a
    doLIT -4 +
    EXIT
end

def word(colon) CELLS       // n -- n
    doLIT CELLSIZE *
    EXIT
end

def word(colon) BL          // -- 32
    doLIT 32
    EXIT
end

def word(colon) >CHAR       // c -- c
    doLIT 127 AND DUP       // mask MSB
    doLIT 127 BL WITHIN     // check for printable
    ?BRANCH :tcha1
    DROP doLIT 95           // replace with '_'
tcha1:
    EXIT
end

def word(colon) DEPTH       // -- n
    // ATTENTION: The order of SP@ and SP0 need to be
    // swapped if the stack grows downwards
    SP@ SP0 @ - doLIT CELLSIZE /
    EXIT
end

def asm(code) PICK         // +n -- w
    popd %acc1
    sll %acc1, #2   // convert cells to bytes
    pushr %dsp      // save %dsp so we can manipulate it
    sub %dsp, %dsp, %acc1
    popd %acc1      // get the n-th entry in data stack
    popr %dsp       // restore %dsp
    pushd %acc1
    NEXT()
end

def word[IMMEDIATE](colon) ALIGNED // b -- a
    // TODO
    EXIT
end

// -------------------------------------------------------------------
// Memory access

// Add n to the contents at address a
def word(colon) +!      // n a --
    SWAP OVER @ +
    SWAP !
    EXIT
end

// Store the double integer to address a
def word(colon) 2!      // d a --
    SWAP OVER ! CELL+ !
    EXIT
end

// Fetch double integer from address a
def word(colon) 2@      // a -- d
    DUP CELL+ @ SWAP @
    EXIT
end

// Return count byte of a string and add 1 to byte address
def word(colon) COUNT   // b -- b +n
    DUP doLIT 1 + SWAP C@
    EXIT
end

// Return the top of the code dictionary
def word(colon) HERE    // -- a
    CP @
    EXIT
end

// Return the address of a temporary buffer
def word(colon) PAD     // -- a
    HERE doLIT 80 +
    EXIT
end

// Return the address of the terminal input buffer
def word(colon) TIB     // -- a
    #TIB CELL+ @
    EXIT
end

// NP word is not implemented since we combine code
// and name dictionaries into one

// Point to the last name in the name dictionary.
def word(colon) LAST
    CP CELL+
    EXIT
end

// Execute vector stored in address a
def word(colon) @EXECUTE    // a --
    @ ?DUP          // ?address or zero
    ?BRANCH :exe1
    EXECUTE         // execute if non-zero
exe1:
    EXIT            // do nothing if zero
end

// Copy u bytes from b1 to b2
def word(colon) CMOVE   // b1 b2 u --
    >R
    BRANCH :cmov2
cmov1:
    >R DUP C@ R@ C!
    doLIT 1 +
    R> doLIT 1 +
cmov2:
    next :cmov1
    2DROP
    EXIT
end

// Adjust the count to eliminate trailing white space
def word(colon) -TRAILING // b u -- b u
    >R
    BRANCH :dtra2
dtra1:
    BL OVER R@ + C@ <
    ?BRANCH :dtra2
    R> doLIT 1 + EXIT   // adjusted count
dtra2:
    next :dtra1
    doLIT 0 EXIT        // count=0
    EXIT
end

// Fill u bytes of character c to area beginning at b
def word(colon) FILL    // b u c --
    SWAP >R SWAP
    BRANCH :fill2
fill1:
    2DUP C! doLIT 1 +
fill2:
    next :fill1
    2DROP
    EXIT
end

// Fill u bytes of 0 to area beginning at b
def word(colon) ERASE   // b u --
    doLIT 0 FILL
    EXIT
end

// Build a counted string with u characters from b. Null fill.
def word(colon) PACK$   // b u a -- a
    ALIGNED DUP >R      // strings only on cell boundary
    OVER DUP doLIT 0
    doLIT 4 UM/MOD DROP // count mod cell
    - OVER +
    doLIT 0 SWAP !      // null fill cell
    2DUP C! doLIT 1 +   // save count
    SWAP CMOVE R>       // move string
    EXIT
end

// -------------------------------------------------------------------
// Numeric Output

// Convert digit u to a character
def word(colon) DIGIT           // u - c
    doLIT 9 OVER < doLIT 7 AND + doLIT 48 +     // 48 is character '0'
    EXIT
end

// Extract the least significat digit from n
def word(colon) EXTRACT         // n base -- n c
    doLIT 0 SWAP UM/MOD
    SWAP DIGIT
    EXIT
end

// Initiate the numeric output process
def word(colon) <#              // --
    PAD HLD !
    EXIT
end

// Insert a character into the numeric output string
def word(colon) HOLD            // c --
    HLD @ doLIT 1 -
    DUP HLD ! C!
    EXIT
end

// Extract one digit from u and append the digit to output string
def word(colon) #               // u -- u
    BASE @ EXTRACT HOLD
    EXIT
end

// Convert u until all digits are added to the output string
def word(colon) #S
digs1:
    # DUP
    ?BRANCH :digs2
    BRANCH :digs1
digs2:
    EXIT
end

// Add a minus sign to the numeric output string
def word(colon) SIGN            // n --
    0<
    ?BRANCH :sign1
    doLIT 45 HOLD               // put '-' in hold
sign1:
    EXIT
end

// Prepare the output string to be TYPE'd
def word(colon) #>              // w -- b u
    DROP HLD @ PAD OVER -
    EXIT
end

// Convert a signed integer to a numeric string
def word(colon) str
    DUP >R ABS
    <# #S R> SIGN #>
    EXIT
end

// Use radix 16 as base for numeric conversions
def word(colon) HEX             // --
    doLIT 16 BASE !
    EXIT
end

// Use radix 10 as base for numeric conversions
def word(colon) DECIMAL         // --
    doLIT 10 BASE !
    EXIT
end

// -------------------------------------------------------------------
// Numeric Input

// Convert a character to its numeric value. A flag indicates success.
def word(colon) DIGIT?          // c base -- u t
    >R doLIT 48 -       // 48 == '0'
    doLIT 9 OVER <
    ?BRANCH :dgtq1
    doLIT 7 -           // subtract additional 7 to get to capital letters
    DUP doLIT 10 < OR
dgtq1:
    DUP R> U< EXIT
end

// Convert a number string to integer. Push a flag on tos.
def word(colon) alias NUMBQ NUMBER? // a -- n T, a F
    BASE @ >R doLIT 0 OVER COUNT
    OVER C@ doLIT 36 =          // 36 is character '$'
    ?BRANCH :numq1
    HEX SWAP doLIT 1 +
    SWAP doLIT 1 -
numq1:
    OVER C@ doLIT 45 = >R       // 45 is character '-'
    SWAP R@ - SWAP R@ + ?DUP
    ?BRANCH :numq6
    doLIT 1 - >R
numq2:
    DUP >R C@ BASE @ DIGIT?
    ?BRANCH :numq4
    SWAP BASE @ * + R>
    doLIT 1 +
    next :numq2
    R@ SWAP DROP
    ?BRANCH :numq3
    NEGATE
numq3:
    SWAP
    BRANCH :numq5
numq4:
    R> R> 2DROP 2DROP doLIT 0
numq5:
    DUP
numq6:
    R> 2DROP
    R> BASE !
    EXIT
end

// -------------------------------------------------------------------
// Basic I/O

// Return input character and true or a false if no input
def word(colon) KEY?    // -- c T | F
    // TODO: This should actualy return immediately
    '?KEY @EXECUTE
    EXIT
end

// wait for and return an input character
def word(colon) KEY     // -- c
    '?KEY @EXECUTE
    EXIT
end

// send a character to the output device
def word(colon) EMIT    // c --
    'EMIT @EXECUTE
    EXIT
end

// send the blank character to the output device
def word(colon) SPACE   // --
    BL EMIT
    EXIT
end

// send n spaces to the output device
def word(colon) SPACES  // +n --
    doLIT 0 MAX >R
    BRANCH :char2
char1:
    SPACE
char2:
    next :char1
    EXIT
end

def word(colon) ECHO
    EMIT
    EXIT
end

// Return the address of a compiled string
def word[COMPILE_ONLY](colon) do$     // -- a
    R> R@ R> COUNT + ALIGNED >R
    SWAP >R
    EXIT
end

// Runtime routine compiled by $". Return address of a compiled string
def word(colon) alias STRQP $"| // -- a
    do$
    EXIT
end

// output u characters from b
def word(colon) TYPE    // b u --
    >R
    BRANCH :type2
type1:
    DUP C@ EMIT
    doLIT 1 +
type2:
    next :type1
    DROP
    EXIT
end

def word(colon) .$      // a --
    COUNT TYPE EXIT
end

// Runtime routine of ." Output a compiled string
def word[COMPILE_ONLY](colon) alias DOTQP ."|   // --
    do$ .$
    EXIT
end

// output a carriage return and a line feed
def word(colon) CR      // --
    doLIT 13 EMIT
    doLIT 10 EMIT
    EXIT
end

// Display an integer in a field of n columns, right justified
def word(colon) .R      // n +n --
    >R str R> OVER -
    SPACES TYPE
    EXIT
end

// Display an unsigned integer in n column, right justified
def word(colon) U.R     // u +n --
    >R <# #S #> R> OVER -
    SPACES TYPE
    EXIT
end

// Display an unsigned integer in free format
def word(colon) U.      // u --
    <# #S #> SPACE TYPE
    EXIT
end

// Display an integer in free format, preceeded by a space
def word(colon) .       // w --
    BASE @ doLIT 10 XOR // is it decimal?
    ?BRANCH :dot1
    U. EXIT             // no, display unsigned
dot1:
    str SPACE TYPE      // yes, display signed
    EXIT
end

// -------------------------------------------------------------------
// Parsing

// Scan string delimited by c. Return found string and its offset.
def word(colon) alias pars parse  // b u c - b u delta ; <string>
    temp ! OVER >R DUP  // c in temp, b in R -- b u u
    ?BRANCH :pars8      // jump to end if length is 0
    doLIT 1 -           // b u-1
    temp @ BL =
    ?BRANCH :pars3      // goto pars3 when c!=BL
    >R                  // b, u-1 in R as loop value
pars1:
    BL OVER C@          // b BL char@b
    - 0< NOT            //
    ?BRANCH :pars2      // is the character non-printable? 
    doLIT 1 +           // yes, skip it; b+1
    next :pars1
    R> DROP             
    doLIT 0 DUP EXIT
pars2:
    R>
pars3:
    OVER SWAP
    >R
pars4:
    temp @ OVER C@ -    // scan for delimiter
    temp @ BL =
    ?BRANCH :pars5
    0<
pars5:
    ?BRANCH :pars6
    doLIT 1 +
    next :pars4
    DUP >R
    BRANCH :pars7
pars6:
    R> DROP DUP
    doLIT 1 + >R
pars7:
    OVER -
    R> R> - EXIT
pars8:
    OVER R> - EXIT
end

// Scan input stream and return counted string delimited by c.
def word(colon) PARSE   // c -- b u
    >R TIB >IN @ +  // current input buffer pointer
    #TIB @ >IN @ -  // remaining count
    R> parse >IN +!
    EXIT
end

// return a code address given a name address
def word(colon) NAME>   // na -- ca
    //CELL- CELL- @ EXIT
    // our own implementation has CFA after name
    DUP C@              // nfa name'len
    doLIT 31 AND +      // mask flags and add length
    doLIT 1 +           // jump over length field
    EXIT
end

// Compare u cells in two strings. Return 0 if identical
def word(colon) SAME?   // a a u -- a a f \ -0+
    >R
    BRANCH :same2
same1:
    OVER R@ + C@
    OVER R@ + C@
    - ?DUP
    ?BRANCH :same2
    R> DROP EXIT    // strings not equal
same2:
    next :same1
    doLIT 0 EXIT    // strings are equal
    EXIT
end

// -------------------------------------------------------------------
// Dictionary search

def word(colon) L>NAME  // lfa -- nfa
    CELL+
    EXIT
end

def word(colon) N>LINK  // nfa -- lfa
    CELL-
    EXIT
end

// compare two counted strings and return true if hey are equal
def word(colon) $=      // b b -- f
    2DUP 
    C@ doLIT 31 AND
    SWAP
    C@ doLIT 31 AND     // b1 b2 n1 n2
    =                   // b1 b2 f
    ?BRANCH :streq2
    DUP C@ doLIT 13 AND // b1 b2 n
    ROT doLIT 1 +       // b2 n b1+1
    ROT doLIT 1 +       // n b1+1 b2+1
    ROT SAME?           // b1+1 b2+1 f
    NIP NIP 0=
    EXIT
streq2:
    2DROP doLIT 0
    EXIT
end

// search the dictionary specified by va (the last NFA) for the
// word given as counted string at address a
def word(colon) find    // a va -- ca na | a F
find_1:
    2DUP $=             // a va f
    ?BRANCH :find_2
    // string found
    NIP DUP             // va va
    NAME> SWAP          // ca na
    EXIT
find_2:                 // not yet found, go to next word in chain
    N>LINK              // a la
    @                   // a la'previous
    DUP
    ?BRANCH :find_3
    L>NAME              // a na'previous
    BRANCH :find_1
find_3:                 // reached the end of the chain without a find
                        // a na'previous
    DROP doLIT 0        // a F
    EXIT
end

// -------------------------------------------------------------------
// Terminal

// Backup the cursor by one character
def word(colon) ^H      // bot eot cur -- bot eot cur
    >R OVER R> SWAP OVER XOR
    ?BRANCH :back1
    doLIT BKSPP 'ECHO @EXECUTE doLIT 1 -
    BL 'ECHO @EXECUTE
    doLIT BKSPP 'ECHO @EXECUTE
back1:
    EXIT
end

// Accept and echo the key stroke and bump the cursor
def word(colon) TAP     // bot eot cur c -- bot eot cur
    DUP 'ECHO @EXECUTE OVER C! doLIT 1 +
    EXIT
end

// Process a key stroke, CR or backspace.
def word(colon) kTAP    // bot eot cur c -- bot eot cur
    DUP doLIT CRR XOR
    ?BRANCH :ktap2
    DUP doLIT BKSPP XOR
    ?BRANCH :ktap1
    TAP EXIT
ktap1:
    DROP ^H EXIT
ktap2:
    DROP SWAP DROP DUP
    EXIT
end

def word(colon) accept  // b u -- b u
// accept characters to input buffer, return with actual count
    OVER + OVER         // b b+u b
accept1:
    2DUP                // b b+u b b+u b
    XOR
    ?BRANCH :accept4
    KEY DUP
    BL - doLIT 95 U<
    BL doLIT 127 WITHIN
    ?BRANCH :accept2
    TAP
    BRANCH :accept3
accept2:
    kTAP         // 'TAP @EXECUTE
accept3:
    BRANCH :accept1
accept4:
    DROP OVER -
    EXIT
end

def word(colon) QUERY
    TIB doLIT 80 'EXPECT @EXECUTE
    #TIB !              // Store the new number of characters in TIB
    DROP doLIT 0 >IN !  // Reset the parsing pointer
    EXIT
end

// -------------------------------
// Additional words

def asm(code) DUMP
    ifkt FKT_DUMP
    NEXT()
end

def asm(code) ILLEGAL
    illegal
    NEXT()
end

def word(colon) TESTW
loop:
    QUERY
    ILLEGAL
    EXIT
end

def asm(code) TESTC
    ifkt FKT_KEY
    ifkt FKT_KEY
    ifkt FKT_DUMP
    illegal
    NEXT()
end
