const TIBB = 0x3000

const BKSPP = 8
const LF = 10
const CRR = 13

// -------------------------------------------------------------------------
// kernel words

def asm(code) doLIT
    mov %acc1, [%ip++]
    PUSHD(%acc1)
    NEXT()
end

def asm(code) BYE
    ifkt FKT_TERMINATE
end

def asm(code) EXIT
    mov %ip, [--%rsp]
    NEXT()
end

def asm(code) EXECUTE
    POPD(%acc1)
    jmp [%acc1]
    NEXT()
end

def asm(code) next
    mov %acc1, #0x1
    mov %acc2, %acc1
    POPR(%acc1)
    sub %acc1, %acc1, %acc2
    jc :next1
    PUSHR(%acc1)
    mov %ip, [%ip]
    NEXT()
next1:
    mov %acc1, CELLSIZE
    add %ip, %ip, %acc1
    NEXT()
end

def asm(code) BRANCH
    mov %ip, [%ip]
    NEXT()
end

def asm(code) ?BRANCH
    POPD(%acc1)
    jz :nobranch
    mov %acc1, CELLSIZE
    add %ip, %ip, %acc1
    NEXT()
nobranch:
    mov %ip, [%ip]
    NEXT()
end

// -------------------------------------------------------------------------
// memory fetch & store

def asm(code) !       // w a --
    POPD(%acc1)
    POPD(%acc2)
    mov [%acc1], %acc2
    NEXT()
end

def asm(code) @       // a -- w
    POPD(%acc1)
    mov %acc1, [%acc1]
    PUSHD(%acc1)
    NEXT()
end

def asm(code) C!      // c b --
    POPD(%acc1)     // get address
    POPD(%acc2)     // get data
    mov.b [%acc1], %acc2
    NEXT()
end

def asm(code) C@      // b -- c
    POPD(%acc1)     // get address
    mov.b %acc2, [%acc1]    // fetch the character from this address
    PUSHD(%acc2)    // push the character on the data stack
    NEXT()
end

// -------------------------------------------------------------------------
// return stack

def asm(code) RP@     // -- a
    PUSHD(%rsp)
    NEXT()
end

def asm(code) RP!     // a --
    POPD(%rsp)
    NEXT()
end

def asm(code) R>      // -- w
    POPR(%acc1)
    PUSHD(%acc1)
    NEXT()
end

def asm(code) R@      // -- w
    POPR(%acc1)
    PUSHR(%acc1)
    PUSHD(%acc1)
    NEXT()
end

def asm(code) >R      // w --
    POPD(%acc1)
    PUSHR(%acc1)
    NEXT()
end

// -------------------------------------------------------------------------
// data stack

def asm(code) DROP
    POPD(%acc1)
    NEXT()
end

def asm(code) DUP
    POPD(%acc1)
    PUSHD(%acc1)
    PUSHD(%acc1)
    NEXT()
end

def asm(code) SWAP
    POPD(%acc1)
    POPD(%acc2)
    PUSHD(%acc1)
    PUSHD(%acc2)
    NEXT()
end

def asm(code) OVER    // w1 w2 -- w1 w2 w1
    POPD(%acc2)
    POPD(%acc1)
    PUSHD(%acc1)
    PUSHD(%acc2)
    PUSHD(%acc1)
    NEXT()
end

def word(colon) NIP     // w1 w2 -- w2
    SWAP DROP
    EXIT
end

def word(colon) 2DROP   // w w --
    DROP DROP
    EXIT
end

def word(colon) 2DUP    // w1 w2 -- w1 w2 w1 w2
    OVER OVER
    EXIT
end

def asm(code) +
    POPD(%acc1)
    POPD(%acc2)
    add %acc1, %acc1, %acc2
    PUSHD(%acc1)
    NEXT()
end

def asm(code) -
    POPD(%acc2)
    POPD(%acc1)
    sub %acc1, %acc1, %acc2
    PUSHD(%acc1)
    NEXT()
end

// -------------------------------------------------------------------------
// logical words

def asm(code) 0<
    POPD(%acc1)
    sra %acc1, #31
    PUSHD(%acc1)
    NEXT()
end

def asm(code) XOR
    POPD(%acc1)
    POPD(%acc2)
    xor %acc1, %acc1, %acc2
    PUSHD(%acc1)
    NEXT()
end

// -------------------------------------------------------------------
// system variables

def word(colon) doVAR
    R>
    EXIT
end

def word(colon) UP
    doVAR :uzero
end

def word(colon) doUSER  // -- a
    R> @
    UP @ +
    EXIT
end

macro __DEFUSERVAR_CFA()
    call :doLIST
    dw :douser_cfa
end

def asm(uservar) SP0
    USER_OFFSET(:u_sp0)
end

def asm(uservar) RP0
    USER_OFFSET(:u_rp0)
end

def asm(uservar) SPAN
    USER_OFFSET(:u_span)
end

def asm(uservar) >IN
    USER_OFFSET(:u_toin)
end

def asm(uservar) #TIB
    USER_OFFSET(:u_htib)
end

def asm(uservar) HLD
    USER_OFFSET(:u_hld)
end

def asm(uservar) HANDLER
    USER_OFFSET(:u_handler)
end

def asm(uservar) CP
    USER_OFFSET(:u_ctop)
end

// -------------------------------------------------------------------
// common functions

def word(colon) U<
    2DUP XOR 0<
    ?BRANCH :ules1
    SWAP DROP 0< EXIT
ules1:
    - 0<
    EXIT
end

def word(colon) WITHIN      // u ul uh -- t
    OVER - >R - R> U<
    EXIT
end

def word(colon) BL
    doLIT 32
    EXIT
end

// -------------------------------------------------------------------
// Memory access

def word(colon) HERE    // -- a
    CP @
    EXIT
end

def word(colon) TIB     // -- a
    #TIB @
    EXIT
end

def word(colon) CMOVE   // b1 b2 u --
    >R
    BRANCH :cmov2
cmov1:
    >R DUP C@ R@ C!
    doLIT 1 +
    R> doLIT 1 +
cmov2:
    next :cmov1
    2DROP
    EXIT
end

// -------------------------------------------------------------------
// Basic I/O

def asm(code) KEY
    ifkt FKT_KEY
    PUSHD(%acc1)
    NEXT()
end

def asm(code) EMIT
    POPD(%acc1)
    ifkt FKT_EMIT
    NEXT()
end

def word(colon) ECHO
    EMIT
    EXIT
end

def word(colon) TYPE    // b u --
    >R
    BRANCH :type2
type1:
    DUP C@ EMIT
    doLIT 1 +
type2:
    next :type1
    DROP
    EXIT
end

// -------------------------------------------------------------------
// Parsing

// -------------------------------------------------------------------
// Forth compiler

def word(colon) TAP     // bot eot cur c -- bot eot cur
    DUP ECHO OVER C! doLIT 1 +
    EXIT
end

def word(colon) kTAP
    DUP doLIT 13 XOR
    ?BRANCH :ktap2
    doLIT 8 XOR
    ?BRANCH :ktap1
    BL TAP EXIT
ktap1:
    doLIT 8 EXIT        // TODO: This should actually perform a backspace
ktap2:
    DROP SWAP DROP DUP
    EXIT
end

def word(colon) EXPECT  // b u -- b u
// accept characters to input buffer, return with actual count
    OVER + OVER         // b b+u b
expect1:
    2DUP                // b b+u b b+u b
    XOR
    ?BRANCH :expect4
    KEY DUP
    BL - doLIT 95 U<
    BL doLIT 127 WITHIN
    ?BRANCH :expect2
    TAP
    BRANCH :expect3
expect2:
    kTAP         // 'TAP @EXECUTE
expect3:
    BRANCH :expect1
expect4:
    DROP OVER -
    EXIT
end

def word(colon) QUERY
query_loop:
    TIB doLIT 80 EXPECT
    BRANCH :query_loop
    EXIT
end

// -------------------------------
// Additional words

def asm(code) DUMP
    ifkt FKT_DUMP
    NEXT()
end

def asm(code) ILLEGAL
    illegal
    NEXT()
end

def word(colon) TESTW
loop:
    QUERY
    ILLEGAL
    EXIT
end

def asm(code) TESTC
    ifkt FKT_KEY
    ifkt FKT_KEY
    ifkt FKT_DUMP
    illegal
    NEXT()
end
